if(parent %in% cell.lines[[line, time]]){
already.there = cell.lines[[line, time + 1]]
cell.lines[[line, time + 1]] = c(already.there[!is.na(already.there)], children[parents.found][[parent]])
break
}
}
}
# new.lines = cbind(cbind(matrix(list(NA), ncol = time - 1, nrow = length(all.mapping.data[[time]][-parents.found])), t(t(cbind(lapply(all.mapping.data[[time]][-parents.found], "[[", 1), lapply(all.mapping.data[[time]][-parents.found], "[", -1))))), matrix(list(NA), ncol = no.track.files - time, nrow = length(all.mapping.data[[time]][-parents.found])))
# cell.lines = rbind(cell.lines, new.lines)
}
cell.lines = cell.lines[order(-apply(cell.lines, 1, function(x) sum(!is.na(unlist(x))))),]
cell.lines
cell.lines = cbind(cbind(t(t(cbind(lapply(all.mapping.data[[1]], "[[", 1), lapply(all.mapping.data[[1]], "[", -1))))), matrix(list(NA), ncol = no.track.files - 2 + 1, nrow = length(all.mapping.data[[1]])))
cell.lines
all.mapping.data
mapping.files
# Read in the mapping data between timepoints
all.mapping.data = lapply(1:length(mapping.files), function(x) {
data = readLines(textConnection(gsub(":", ",", readLines(mapping.files[x]))))
data = lapply(data, function(y) gsub(",", "", y))
data = lapply(data, function(y) as.integer(str_split(y," ")[[1]]))
data
})
cell.lines = cbind(cbind(t(t(cbind(lapply(all.mapping.data[[1]], "[[", 1), lapply(all.mapping.data[[1]], "[", -1))))), matrix(list(NA), ncol = no.track.files - 2 + 1, nrow = length(all.mapping.data[[1]])))
cell.lines
for(time in 2:no.track.files){
this.mapping.data = all.mapping.data[[time]]
parents = lapply(this.mapping.data, "[[", 1)
children = lapply(this.mapping.data, "[", -1)
parents.found = sapply(parents, function(x) x %in% unlist(cell.lines[, time]))
for(parent in 1:length(parents[parents.found])){
for(line in 1:nrow(cell.lines)){
if(parent %in% cell.lines[[line, time]]){
already.there = cell.lines[[line, time + 1]]
cell.lines[[line, time + 1]] = c(already.there[!is.na(already.there)], children[parents.found][[parent]])
break
}
}
}
# new.lines = cbind(cbind(matrix(list(NA), ncol = time - 1, nrow = length(all.mapping.data[[time]][-parents.found])), t(t(cbind(lapply(all.mapping.data[[time]][-parents.found], "[[", 1), lapply(all.mapping.data[[time]][-parents.found], "[", -1))))), matrix(list(NA), ncol = no.track.files - time, nrow = length(all.mapping.data[[time]][-parents.found])))
# cell.lines = rbind(cell.lines, new.lines)
}
cell.lines = cell.lines[order(-apply(cell.lines, 1, function(x) sum(!is.na(unlist(x))))),]
cell.lines
this.mapping.data = all.mapping.data[[time]]
parents = lapply(this.mapping.data, "[[", 1)
parents
children = lapply(this.mapping.data, "[", -1)
parents.found = sapply(parents, function(x) x %in% unlist(cell.lines[, time]))
for(time in 2:no.track.files){
this.mapping.data = all.mapping.data[[time]]
parents = lapply(this.mapping.data, "[[", 1)
children = lapply(this.mapping.data, "[", -1)
parents.found = sapply(parents, function(x) x %in% unlist(cell.lines[, time]))
for(parent in 1:length(parents[parents.found])){
for(line in 1:nrow(cell.lines)){
if(parents[parent] %in% cell.lines[[line, time]]){
already.there = cell.lines[[line, time + 1]]
cell.lines[[line, time + 1]] = c(already.there[!is.na(already.there)], children[parents.found][[parent]])
break
}
}
}
# new.lines = cbind(cbind(matrix(list(NA), ncol = time - 1, nrow = length(all.mapping.data[[time]][-parents.found])), t(t(cbind(lapply(all.mapping.data[[time]][-parents.found], "[[", 1), lapply(all.mapping.data[[time]][-parents.found], "[", -1))))), matrix(list(NA), ncol = no.track.files - time, nrow = length(all.mapping.data[[time]][-parents.found])))
# cell.lines = rbind(cell.lines, new.lines)
}
cell.lines = cbind(cbind(t(t(cbind(lapply(all.mapping.data[[1]], "[[", 1), lapply(all.mapping.data[[1]], "[", -1))))), matrix(list(NA), ncol = no.track.files - 2 + 1, nrow = length(all.mapping.data[[1]])))
for(time in 2:no.track.files){
this.mapping.data = all.mapping.data[[time]]
parents = lapply(this.mapping.data, "[[", 1)
children = lapply(this.mapping.data, "[", -1)
parents.found = sapply(parents, function(x) x %in% unlist(cell.lines[, time]))
for(parent in 1:length(parents[parents.found])){
for(line in 1:nrow(cell.lines)){
if(parents[parent] %in% cell.lines[[line, time]]){
already.there = cell.lines[[line, time + 1]]
cell.lines[[line, time + 1]] = c(already.there[!is.na(already.there)], children[parents.found][[parent]])
break
}
}
}
# new.lines = cbind(cbind(matrix(list(NA), ncol = time - 1, nrow = length(all.mapping.data[[time]][-parents.found])), t(t(cbind(lapply(all.mapping.data[[time]][-parents.found], "[[", 1), lapply(all.mapping.data[[time]][-parents.found], "[", -1))))), matrix(list(NA), ncol = no.track.files - time, nrow = length(all.mapping.data[[time]][-parents.found])))
# cell.lines = rbind(cell.lines, new.lines)
}
cell.lines = cell.lines[order(-apply(cell.lines, 1, function(x) sum(!is.na(unlist(x))))),]
parents
parents
cell.lines = cbind(cbind(t(t(cbind(lapply(all.mapping.data[[1]], "[[", 1), lapply(all.mapping.data[[1]], "[", -1))))), matrix(list(NA), ncol = no.track.files - 2 + 1, nrow = length(all.mapping.data[[1]])))
for(time in 2:no.track.files){
this.mapping.data = all.mapping.data[[time]]
parents = lapply(this.mapping.data, "[[", 1)
children = lapply(this.mapping.data, "[", -1)
parents.found = sapply(parents, function(x) x %in% unlist(cell.lines[, time]))
for(ii in 1:length(parents[parents.found])){
for(line in 1:nrow(cell.lines)){
if(parents[[ii]] %in% cell.lines[[line, time]]){
already.there = cell.lines[[line, time + 1]]
cell.lines[[line, time + 1]] = c(already.there[!is.na(already.there)], children[parents.found][[parent]])
break
}
}
}
# new.lines = cbind(cbind(matrix(list(NA), ncol = time - 1, nrow = length(all.mapping.data[[time]][-parents.found])), t(t(cbind(lapply(all.mapping.data[[time]][-parents.found], "[[", 1), lapply(all.mapping.data[[time]][-parents.found], "[", -1))))), matrix(list(NA), ncol = no.track.files - time, nrow = length(all.mapping.data[[time]][-parents.found])))
# cell.lines = rbind(cell.lines, new.lines)
}
time
this.mapping.data = all.mapping.data[[time]]
parents = lapply(this.mapping.data, "[[", 1)
children = lapply(this.mapping.data, "[", -1)
parents.found = sapply(parents, function(x) x %in% unlist(cell.lines[, time]))
already.there = cell.lines[[line, time + 1]]
already.there
cell.lines[[line, time + 1]] = c(already.there[!is.na(already.there)], children[parents.found][[parent]])
c(already.there[!is.na(already.there)], children[parents.found][[parent]])
already.there[!is.na(already.there)]
children[parents.found][[parent]]
children
children[parents.found]
children[parents.found][[parent]]
(children[parents.found])[[parent]]
children[parents.found]
parent
ii = 1
children[parents.found][[ii]])
children[parents.found][[ii]]
for(ii in 1:length(parents[parents.found])){
for(line in 1:nrow(cell.lines)){
if(parents[[ii]] %in% cell.lines[[line, time]]){
already.there = cell.lines[[line, time + 1]]
cell.lines[[line, time + 1]] = c(already.there[!is.na(already.there)], children[parents.found][[ii]])
break
}
}
}
cell.lines
cell.lines = cbind(cbind(t(t(cbind(lapply(all.mapping.data[[1]], "[[", 1), lapply(all.mapping.data[[1]], "[", -1))))), matrix(list(NA), ncol = no.track.files - 2 + 1, nrow = length(all.mapping.data[[1]])))
for(time in 2:no.track.files){
this.mapping.data = all.mapping.data[[time]]
parents = lapply(this.mapping.data, "[[", 1)
children = lapply(this.mapping.data, "[", -1)
parents.found = sapply(parents, function(x) x %in% unlist(cell.lines[, time]))
for(ii in 1:length(parents[parents.found])){
for(line in 1:nrow(cell.lines)){
if(parents[[ii]] %in% cell.lines[[line, time]]){
already.there = cell.lines[[line, time + 1]]
cell.lines[[line, time + 1]] = c(already.there[!is.na(already.there)], children[parents.found][[ii]])
break
}
}
}
# new.lines = cbind(cbind(matrix(list(NA), ncol = time - 1, nrow = length(all.mapping.data[[time]][-parents.found])), t(t(cbind(lapply(all.mapping.data[[time]][-parents.found], "[[", 1), lapply(all.mapping.data[[time]][-parents.found], "[", -1))))), matrix(list(NA), ncol = no.track.files - time, nrow = length(all.mapping.data[[time]][-parents.found])))
# cell.lines = rbind(cell.lines, new.lines)
}
parents
ii
parents.not.found = !1:length(parents) %in% parents.not.found
parents.not.found = !1:length(parents) %in% parents.found
parents.not.found
for(ii in parents.found){
for(line in 1:nrow(cell.lines)){
if(parents[[ii]] %in% cell.lines[[line, time]]){
already.there = cell.lines[[line, time + 1]]
cell.lines[[line, time + 1]] = c(already.there[!is.na(already.there)], children[parents.found][[ii]])
break
}
}
}
parents.found
parents.found = which(sapply(parents, function(x) x %in% unlist(cell.lines[, time])))
for(ii in parents.found){
for(line in 1:nrow(cell.lines)){
if(parents[[ii]] %in% cell.lines[[line, time]]){
already.there = cell.lines[[line, time + 1]]
cell.lines[[line, time + 1]] = c(already.there[!is.na(already.there)], children[parents.found][[ii]])
break
}
}
}
cell.lines = cbind(cbind(t(t(cbind(lapply(all.mapping.data[[1]], "[[", 1), lapply(all.mapping.data[[1]], "[", -1))))), matrix(list(NA), ncol = no.track.files - 2 + 1, nrow = length(all.mapping.data[[1]])))
for(time in 2:no.track.files){
this.mapping.data = all.mapping.data[[time]]
parents = lapply(this.mapping.data, "[[", 1)
children = lapply(this.mapping.data, "[", -1)
parents.found = which(sapply(parents, function(x) x %in% unlist(cell.lines[, time])))
parents.not.found = !1:length(parents) %in% parents.found
for(ii in parents.found){
for(line in 1:nrow(cell.lines)){
if(parents[[ii]] %in% cell.lines[[line, time]]){
already.there = cell.lines[[line, time + 1]]
cell.lines[[line, time + 1]] = c(already.there[!is.na(already.there)], children[parents.found][[ii]])
break
}
}
}
# new.lines = cbind(cbind(matrix(list(NA), ncol = time - 1, nrow = length(all.mapping.data[[time]][-parents.found])), t(t(cbind(lapply(all.mapping.data[[time]][-parents.found], "[[", 1), lapply(all.mapping.data[[time]][-parents.found], "[", -1))))), matrix(list(NA), ncol = no.track.files - time, nrow = length(all.mapping.data[[time]][-parents.found])))
# cell.lines = rbind(cell.lines, new.lines)
}
ii
children
children[parents.found]
cell.lines = cbind(cbind(t(t(cbind(lapply(all.mapping.data[[1]], "[[", 1), lapply(all.mapping.data[[1]], "[", -1))))), matrix(list(NA), ncol = no.track.files - 2 + 1, nrow = length(all.mapping.data[[1]])))
for(time in 2:no.track.files){
this.mapping.data = all.mapping.data[[time]]
parents = lapply(this.mapping.data, "[[", 1)
children = lapply(this.mapping.data, "[", -1)
parents.found = which(sapply(parents, function(x) x %in% unlist(cell.lines[, time])))
parents.not.found = !1:length(parents) %in% parents.found
for(ii in parents.found){
for(line in 1:nrow(cell.lines)){
if(parents[[ii]] %in% cell.lines[[line, time]]){
already.there = cell.lines[[line, time + 1]]
cell.lines[[line, time + 1]] = c(already.there[!is.na(already.there)], children[[ii]])
break
}
}
}
# new.lines = cbind(cbind(matrix(list(NA), ncol = time - 1, nrow = length(all.mapping.data[[time]][-parents.found])), t(t(cbind(lapply(all.mapping.data[[time]][-parents.found], "[[", 1), lapply(all.mapping.data[[time]][-parents.found], "[", -1))))), matrix(list(NA), ncol = no.track.files - time, nrow = length(all.mapping.data[[time]][-parents.found])))
# cell.lines = rbind(cell.lines, new.lines)
}
cell.lines
new.lines = cbind(cbind(matrix(list(NA), ncol = time - 1, nrow = length(all.mapping.data[[time]][-parents.found])), t(t(cbind(lapply(all.mapping.data[[time]][-parents.found], "[[", 1), lapply(all.mapping.data[[time]][-parents.found], "[", -1))))), matrix(list(NA), ncol = no.track.files - time, nrow = length(all.mapping.data[[time]][-parents.found])))
new.lines
cell.lines = cbind(cbind(t(t(cbind(lapply(all.mapping.data[[1]], "[[", 1), lapply(all.mapping.data[[1]], "[", -1))))), matrix(list(NA), ncol = no.track.files - 2 + 1, nrow = length(all.mapping.data[[1]])))
for(time in 2:no.track.files){
this.mapping.data = all.mapping.data[[time]]
parents = lapply(this.mapping.data, "[[", 1)
children = lapply(this.mapping.data, "[", -1)
parents.found = which(sapply(parents, function(x) x %in% unlist(cell.lines[, time])))
parents.not.found = !1:length(parents) %in% parents.found
for(ii in parents.found){
for(line in 1:nrow(cell.lines)){
if(parents[[ii]] %in% cell.lines[[line, time]]){
already.there = cell.lines[[line, time + 1]]
cell.lines[[line, time + 1]] = c(already.there[!is.na(already.there)], children[[ii]])
break
}
}
}
new.lines = cbind(cbind(matrix(list(NA), ncol = time - 1, nrow = length(all.mapping.data[[time]][-parents.found])), t(t(cbind(lapply(all.mapping.data[[time]][-parents.found], "[[", 1), lapply(all.mapping.data[[time]][-parents.found], "[", -1))))), matrix(list(NA), ncol = no.track.files - time, nrow = length(all.mapping.data[[time]][-parents.found])))
cell.lines = rbind(cell.lines, new.lines)
}
cell.lines = cell.lines[order(-apply(cell.lines, 1, function(x) sum(!is.na(unlist(x))))),]
cell.lines
length(cell.lines)
nrow(cell.lines)
mothers = lapply(1:length(all.mapping.data), function(x)
lapply(all.mapping.data[[x]], function(y) {
mother.id = y[1]
cell.id = y[-1]
mums = rep(mother.id, length(cell.id))
ts = rep(x, length(cell.id))
return(cbind(ts, mums, cell.id))
}))
mothers = do.call(rbind, unlist(mothers, recursive = F))
first.gen = cbind(rep(0, length(all.mapping.data[[1]])),
rep(NA, length(all.mapping.data[[1]])),
sapply(all.mapping.data[[1]], "[[", 1))
mothers = rbind(first.gen, mothers)
mothers
colnames(mothers) = c("t", "mother.id", "cell.id")
output.data = matrix(NA, ncol=15, nrow=0)
colnames(output.data) = c("cell.id", "lineage.id", "mother.id", "daughter1.id",
"daughter2.id", "age", "t","x","y","z", "vol", "expr",
"mother.expr", "daughter1.expr", "daughter2.expr")
source('~/compbio/thesis/code/extract_division_events.R')
output.data
mothers
cell.lines.data = cell.lines.data[sapply(cell.lines.data, length) > 0]
cell.lines.data
if(plant.no != 1){
cell.lines.data =  vector("list", nrow(cell.lines))  # prealloc
for (ii in 1:nrow(cell.lines)) {
lineage.data = matrix(NA, nrow = 0, ncol = 1 + ncol(quant.data[[1]]))
for (jj in 1:no.track.files) {
cells.in.lineage = which(quant.data[[jj]]$Cell.id %in% cell.lines[[ii, jj]])
if (length(cells.in.lineage) > 0){
for (kk in 1:length(cells.in.lineage))
lineage.data = rbind(lineage.data, c(Time = timepoints[jj], as.vector(quant.data[[jj]][cells.in.lineage[kk], ])))
} else
lineage.data = rbind(lineage.data, rep(NA, ncol(lineage.data)))
}
cell.lines.data[[ii]] = lineage.data
}
# Sort cell lines data by number fo members
cell.lines.members = sapply(cell.lines.data, function(x) length(x[!is.na(x)]))
cell.lines.data = cell.lines.data[order(-cell.lines.members)]
}
cell.lines.data
head(cell.lines.data)
source('~/compbio/thesis/code/extract_division_events.R')
output.data
output.data[,"age"]
source('~/compbio/thesis/code/extract_division_events.R')
output.data[,"age"]
source('~/compbio/thesis/code/extract_division_events.R')
NA == NA
mothers
source('~/compbio/thesis/code/extract_division_events.R')
age = 0
last.mother = mother.id
for(kk in 1:time){
mother.to.mother = mothers[mothers[, "cell.id"] == last.mother, mothers[,"t"] == timepoints[kk - 1], "mother.id"]
no.offspring = length(mothers[, "mother.id"] == mother.to.mother & mothers[,"t" == timepoints[kk - 1]])
if(no.offspring > 1)
break
age = age + 1
}
kk
mother.to.mother = mothers[mothers[, "cell.id"] == last.mother, mothers[,"t"] == timepoints[kk - 1], "mother.id"]
mothers
mother.to.mother = mothers[mothers[, "cell.id"] == last.mother & mothers[,"t"] == timepoints[kk - 1], "mother.id"]
mother.to.mother
mother.to.mother = mothers[mothers[, "cell.id"] == last.mother & mothers[,"t"] == timepoints[kk - 1], "mother.id"]
no.offspring = length(mothers[, "mother.id"] == mother.to.mother & mothers[,"t" == timepoints[kk - 1]])
no.offspring
source('~/compbio/thesis/code/extract_division_events.R')
output.data[,"age"]
output.data
division.data
mother.id = mothers[mothers[, "cell.id"] == this.cell.id & mothers[, "t"] == timepoints[time], "mother.id"] # Which is the mother id for this cell?
mother.id
this.cell.id
mothers
mothers[which(mothers[,"t"] == time,"t"]
mothers[which(mothers[,"t"] == time),"t"]
mothers[which(mothers[,"t"] == time), ]
cell.id
this.cell.id
timepoints[0]
source('~/compbio/thesis/code/extract_division_events.R')
warnings()
output.data[,"age"]
age = 0
last.mother = mother.id
last.mother
lineage.id = which(sapply(1:nrow(cell.lines), function(x) division.data[[ii]][1] %in% cell.lines[[x, time]]))
this.cell.id = division.data[[ii]][1] # remember, id and index are different
mother.id = mothers[mothers[, "cell.id"] == this.cell.id & mothers[, "t"] == timepoints[time], "mother.id"] # Which is the mother id for this cell?
mother.id = ifelse(length(mother.id) == 0, NA, mother.id)
mother.expr = output.data[which(output.data[,"t"] == timepoints[time] & output.data[,"cell.id"] == mother.id), "expr"]
mother.expr = ifelse(length(mother.expr) == 0, NA, mother.expr)
mother.id
age = 0
last.mother = mother.id
time
mother.to.mother = mothers[mothers[, "cell.id"] == last.mother & mothers[,"t"] == timepoints[kk - 1], "mother.id"]
mother.to.mother
no.offspring = length(mothers[, "mother.id"] == mother.to.mother & mothers[,"t" == timepoints[kk - 1]])
no.offspring
if(no.offspring > 1 | no.offspring == 0)
break
source('~/compbio/thesis/code/extract_division_events.R')
mother.to.mother = mothers[mothers[, "cell.id"] == last.mother & mothers[,"t"] == timepoints[kk - 1], "mother.id"]
mother.to.mother
no.offspring = length(mothers[, "mother.id"] == mother.to.mother & mothers[,"t" == timepoints[kk - 1]])
mothers[,"t"] == timepoints[kk - 1]
source('~/compbio/thesis/code/extract_division_events.R')
output.data[,"age"]
last.mother
mothers = lapply(1:length(all.mapping.data), function(x)
lapply(all.mapping.data[[x]], function(y) {
mother.id = y[1]
cell.id = y[-1]
mums = rep(mother.id, length(cell.id))
ts = rep(timepoints[x], length(cell.id))
return(cbind(ts, mums, cell.id))
}))
mothers = do.call(rbind, unlist(mothers, recursive = F))
first.gen = cbind(rep(0, length(all.mapping.data[[1]])),
rep(NA, length(all.mapping.data[[1]])),
sapply(all.mapping.data[[1]], "[[", 1))
mothers = rbind(first.gen, mothers)
colnames(mothers) = c("t", "mother.id", "cell.id")
output.data = matrix(NA, ncol=15, nrow=0)
colnames(output.data) = c("cell.id", "lineage.id", "mother.id", "daughter1.id",
"daughter2.id", "age", "t","x","y","z", "vol", "expr",
"mother.expr", "daughter1.expr", "daughter2.expr")
mothers
mothers = lapply(1:length(all.mapping.data), function(x)
lapply(all.mapping.data[[x]], function(y) {
mother.id = y[1]
cell.id = y[-1]
mums = rep(mother.id, length(cell.id))
ts = rep(timepoints[x + 1], length(cell.id))
return(cbind(ts, mums, cell.id))
}))
mothers = do.call(rbind, unlist(mothers, recursive = F))
first.gen = cbind(rep(0, length(all.mapping.data[[1]])),
rep(NA, length(all.mapping.data[[1]])),
sapply(all.mapping.data[[1]], "[[", 1))
mothers = rbind(first.gen, mothers)
colnames(mothers) = c("t", "mother.id", "cell.id")
output.data = matrix(NA, ncol=15, nrow=0)
colnames(output.data) = c("cell.id", "lineage.id", "mother.id", "daughter1.id",
"daughter2.id", "age", "t","x","y","z", "vol", "expr",
"mother.expr", "daughter1.expr", "daughter2.expr")
mothers
source('~/compbio/thesis/code/extract_division_events.R')
output.data[,"age"]
output.data
mother.id
source('~/compbio/thesis/code/extract_division_events.R')
mothers
this.cell.id
cell.lines
cell.lines
cell.lines[,1]
unlist(cell.lines[,1])
mothers
source('~/compbio/thesis/code/extract_division_events.R')
last.mother = mother.id
mother.to.mother = mothers[mothers[, "cell.id"] == last.mother & mothers[,"t"] == timepoints[kk-1], "mother.id"]
mother.to.mother
mothers[, "mother.id"] == mother.to.mother & mothers[,"t" == timepoints[kk-1]]
mother.to.mother
mothers[,"t" == timepoints[kk-1]
]
mothers[,"t"] == timepoints[kk-1]
any(mothers[,"t"] == timepoints[kk-1])
mothers[, "mother.id"] == mother.to.mother & mothers[,"t"] == timepoints[kk-1]
any(mothers[, "mother.id"] == mother.to.mother & mothers[,"t"] == timepoints[kk-1])
no.offspring = length(mothers[, "mother.id"] == mother.to.mother & mothers[,"t"] == timepoints[kk-1])
no.offspring = sum(mothers[, "mother.id"] == mother.to.mother & mothers[,"t"] == timepoints[kk-1])
no.offspring
for(kk in (time):1){
mother.to.mother = mothers[mothers[, "cell.id"] == last.mother & mothers[,"t"] == timepoints[kk-1], "mother.id"]
no.offspring = sum(mothers[, "mother.id"] == mother.to.mother & mothers[,"t"] == timepoints[kk-1])
if(no.offspring > 1 || no.offspring == 0)
break
last.mother = mother.to.mother
age = age + 1
}
age
time
source('~/compbio/thesis/code/extract_division_events.R')
mother.to.mother
source('~/compbio/thesis/code/extract_division_events.R')
source('~/compbio/thesis/code/extract_division_events.R')
output.data[,"age"]
hist(output.data[,"age"])
source('~/compbio/thesis/code/extract_division_events.R')
output.data[,"age"]
hist(output.data[,"age"])
source('~/compbio/thesis/code/extract_division_events.R')
hist(output.data[,"age"])
hist(output.data[,"age"], breaks = 20)
hist(output.data[,"age"], breaks = 40)
hist(output.data[,"expr"], breaks = 40)
topcell = all.quant.data[[time]]
all.quant.data[[time]]
time
length(all.quant.data)
topcell = quant.data[[time]]
quant.data
topcell = quant.data[[time]][order(-quant.data[[time]]$z), 2:4][1:3, ] # Take top 3 cells
topcell
topcell[1,1]
top.coords = apply(topcell, 2, mean)
top.coords
top.coords = c(apply(topcell, 2, mean))
top.coords
typeof(top.coords)
xyzvi = c(
all.quant.data$x[, time][which(this.cell.index)],
all.quant.data$y[, time][which(this.cell.index)],
all.quant.data$z[, time][which(this.cell.index)],
all.quant.data$Boa.volume[, time][which(this.cell.index)],
all.quant.data$Mean.cell.intensity[, time][which(this.cell.index)]
all.quant.data$Mean.cell.intensity[, time][which(this.cell.index)]
all.quant.data$Mean.cell.intensity[, time][which(this.cell.index)]
)
cell.lines.data
cell.lines.data = cell.lines.data[-sapply(cell.lines.data, function(x) sum(!is.na(unlist(x))) == 0)]
cell.lines.data
head(cell.lines.data9
head(cell.lines.data)
head(cell.lines.data)
-sapply(cell.lines.data, function(x) sum(!is.na(unlist(x))) == 0)
-sapply(cell.lines.data, function(x) sum(!is.na(unlist(x))))
-sapply(cell.lines.data, function(x) sum(!is.na(unlist(x))) == 0)
cell.lines.data = cell.lines.data[-c(sapply(cell.lines.data, function(x) sum(!is.na(unlist(x))) == 0))]
cell.lines.data
if(plant.no != 1){
cell.lines.data =  vector("list", nrow(cell.lines))  # prealloc
for (ii in 1:nrow(cell.lines)) {
lineage.data = matrix(NA, nrow = 0, ncol = 1 + ncol(quant.data[[1]]))
for (jj in 1:no.track.files) {
cells.in.lineage = which(quant.data[[jj]]$Cell.id %in% cell.lines[[ii, jj]])
if (length(cells.in.lineage) > 0){
for (kk in 1:length(cells.in.lineage))
lineage.data = rbind(lineage.data, c(Time = timepoints[jj], as.vector(quant.data[[jj]][cells.in.lineage[kk], ])))
} else
lineage.data = rbind(lineage.data, rep(NA, ncol(lineage.data)))
}
cell.lines.data[[ii]] = lineage.data
}
# Sort cell lines data by number fo members
cell.lines.members = sapply(cell.lines.data, function(x) length(x[!is.na(x)]))
cell.lines.data = cell.lines.data[order(-cell.lines.members)]
cell.lines.data = cell.lines.data[-c(sapply(cell.lines.data, function(x) sum(!is.na(unlist(x))) == 0))]
}
cell.lines.data
sapply(cell.lines.data, function(x) sum(!is.na(unlist(x))) == 0))
sapply(cell.lines.data, function(x) sum(!is.na(unlist(x))) == 0)
source('~/compbio/thesis/code/extract_division_events.R')
source('~/compbio/thesis/code/extract_division_events.R')
output.dat
output.data
hist(output.data[,"age"])
hist(output.data[,"expr"])
hist(output.data[,"expr"], breaks =100)
hist(output.data[,"dist2top"], breaks =100)
