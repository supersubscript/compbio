mtext("Patterns retrieved", side=2, las = 3, line = 2.5, cex = 1.5)
arrows(1:length(avg), avg-serr, 1:length(avg), avg+serr, length=0.05, angle=90, code=3, cex = 3, col = "black")
axis(side = 2, cex = 1.5, labels = 4:13, at=4:13)
source('~/compbio/src/assignments/pga1/code/fisherb.R')
source('~/compbio/src/assignments/pga1/code/fisherc.R')
source('~/compbio/src/assignments/pga1/code/fisherc.R')
source('~/compbio/src/assignments/pga1/code/fisherc.R')
source('~/compbio/src/assignments/pga1/code/fisherc.R')
source('~/compbio/src/assignments/pga1/code/fisherc.R')
source('~/compbio/src/assignments/pga1/code/fisherc.R')
source('~/compbio/src/assignments/pga1/code/fisherc.R')
source('~/compbio/src/assignments/pga1/code/fisherc.R')
source('~/compbio/src/assignments/pga1/code/fisherc.R')
source('~/compbio/src/assignments/pga1/code/fisherc.R')
source('~/compbio/src/assignments/pga1/code/fisherc.R')
source('~/compbio/src/assignments/pga1/code/fisherc.R')
source('~/compbio/src/assignments/pga1/code/fisherc.R')
source('~/compbio/src/assignments/pga1/code/fisherc.R')
source('~/compbio/src/assignments/pga1/code/fisherc.R')
source('~/compbio/src/assignments/pga1/code/fisherb.R')
source('~/compbio/src/assignments/pga1/code/fisherc.R')
source('~/compbio/src/assignments/pga1/code/fisherc.R')
source('~/compbio/src/assignments/pga1/code/fisherc.R')
source('~/compbio/src/assignments/pga1/code/fisherc.R')
source('~/compbio/src/assignments/pga1/code/fisherc.R')
source('~/compbio/src/assignments/pga1/code/fisherc.R')
source('~/compbio/src/assignments/pga1/code/fisherc.R')
source('~/compbio/src/assignments/pga1/code/fisherc.R')
source('~/compbio/src/assignments/pga1/code/fisherc.R')
source('~/compbio/src/assignments/pga1/code/fisherd.R')
source('~/compbio/src/assignments/cnsa2/code/oscillations.R')
source('~/compbio/src/assignments/cnsa2/code/oscillations.R')
source('~/compbio/src/assignments/cnsa2/code/oscillations.R')
source('~/compbio/src/assignments/cnsa2/code/oscillations.R')
results
source('~/compbio/src/assignments/cnsa2/code/oscillations.R')
source('~/compbio/src/assignments/cnsa2/code/oscillations.R')
results
runSimulation()
runSimulation()
runSimulation()
source('~/compbio/src/assignments/cnsa2/code/oscillations.R')
results
runSimulation()
results = replicate(10, runSimulation)
results
source('~/compbio/src/assignments/cnsa2/code/oscillations.R')
source('~/compbio/src/assignments/cnsa2/code/oscillations.R')
results
source('~/compbio/src/assignments/cnsa2/code/oscillations.R')
results
results[,1]
plot(results[,1]$u, results[,1]$v)
plot(results[,1]$u, results[,1]$v, type = "l")
source('~/compbio/src/assignments/cnsa2/code/oscillations.R')
source('~/compbio/src/assignments/cnsa2/code/oscillations.R')
source('~/compbio/src/assignments/cnsa2/code/oscillations.R')
plot(start.t:end.t, results[,1]$u, type = "l")
start.t
end.t
plot(start.t:end.t - 1, results[,1]$u, type = "l")
plot(start.t:(end.t-1), results[,1]$u, type = "l")
plot(start.t:(end.t-1), results[,1]$v, type = "l")
source('~/compbio/src/assignments/cnsa2/code/oscillations.R')
source('~/compbio/src/assignments/cnsa2/code/oscillations.R')
source('~/compbio/src/assignments/cnsa2/code/oscillations.R')
source('~/compbio/src/assignments/cnsa2/code/oscillations.R')
source('~/compbio/src/assignments/cnsa2/code/oscillations.R')
plot(start.t:(end.t-1), results[,1]$u, type = "l")
source('~/compbio/src/assignments/cnsa2/code/oscillations.R')
results = replicate(2, runSimulation())
results
mean.u = apply(results, 1, mean)
mean.u = apply(results, 1, function(x) results)
mean.u
mean.u = apply(results, 1, function(x) x)
mean.u
mean.u = apply(results, 1, function(x) x)
mean.u
mean.u = apply(results, 1, function(x) x[[1]])
mean.u
mean.u = apply(results, 1, function(x) lapply(x, "[", function(z) z))
mean.u = apply(results, 1, function(x) sapply(x, "[", function(z) z))
mean.u = apply(results, 1, function(x) sapply(x, function(z) z))
mean.u
source('~/compbio/src/assignments/cnsa2/code/oscillations.R')
mean.u
source('~/compbio/src/assignments/cnsa2/code/oscillations.R')
source('~/compbio/src/assignments/cnsa2/code/oscillations.R')
apply(results, 1, function(x) sapply(x, ))
apply(results, 1, function(x) x)
mean.u = apply(results, 1, function(x) mean(unlist(lapply(x, function(y) y[end.t])))
)''
)
mean.u = apply(results, 1, function(x) mean(unlist(lapply(x, function(y) y[end.t]))))
mean.y
mean.u
v
u
stds = apply(results, 1, function(x) sd(unlist(lapply(x, function(y) y[end.t])))/sqrt(no.replicates))
source('~/compbio/src/assignments/cnsa2/code/oscillations.R')
stds
means
source('~/compbio/src/assignments/cnsa2/code/oscillations.R')
source('~/compbio/src/assignments/cnsa2/code/oscillations.R')
results
means
v
Ie*1:2
source('~/compbio/src/assignments/cnsa2/code/oscillations.R')
means
source('~/compbio/src/assignments/cnsa2/code/oscillations.R')
source('~/compbio/src/assignments/cnsa2/code/oscillations.R')
means
source('~/compbio/src/assignments/cnsa2/code/oscillations.R')
source('~/compbio/src/assignments/cnsa2/code/oscillations.R')
v
mean()
means
results = replicate(2, runSimulation(start.v, start.u, c(1,5), 1:2))
results
results[,1]
results[,2]
epsilons = runif(no.replicates)
Ies = runif(no.replicates)
results = sapply(1:no.replicates, function(x) runSimulation(start.v, start.u, epsilons[x], Ies[x]))
results
source('~/compbio/src/assignments/cnsa2/code/oscillations.R')
results
results[,1]
results[,2]
results
source('~/compbio/src/assignments/cnsa2/code/oscillations.R')
source('~/ost.R')
getwd()
source('~/ost.R')
source('~/ost.R')
read.fsa()
source('~/ost.R')
source('~/ost.R')
install.packages("devtools")
install_github("plantarum/binner")
library(devtools)
install_github("plantarum/binner")
devtools::install_github("homerhanumat/addinplots")
your_data_frame <- do.call(rbind, lapply(plant.files, function(x) read.csv(textConnection(gsub(":", ",", readLines(x))), sep = ",", header = FALSE)))
plant.files = list.files("../data/PNAS/plant13/tracking_data/", full.names = TRUE)
plant.files
setwd("/home/henrik/compbio/thesis/code/")
plant.files = list.files("../data/PNAS/plant13/tracking_data/", full.names = TRUE)
plant.files
your_data_frame <- do.call(rbind, lapply(plant.files, function(x) read.csv(textConnection(gsub(":", ",", readLines(x))), sep = ",", header = FALSE)))
your_data_frame <- do.call(list, lapply(plant.files, function(x) read.csv(textConnection(gsub(":", ",", readLines(x))), sep = ",", header = FALSE)))
your_data_frame
data = lapply(data, function(x) unname(split(x, seq(nrow(x)))))
data = lapply(data, function(y) lapply(y, function(x) unique(unlist(unname(x[!is.na(x)])))))
data = lapply(plant.files, function(x) read.csv(textConnection(gsub(":", ",", readLines(x))), sep = ",", header =
FALSE))
data
data =   your_data_frame
data = lapply(data, function(x) unname(split(x, seq(nrow(x)))))
data
data = lapply(data, function(y) lapply(y, function(x) unique(unlist(unname(x[!is.na(x)])))))
data
unlist(data)
unlist(data, recursive = FALSE)
data = lapply(data, function(x) unname(split(x, seq(nrow(x)))))
data = lapply(data, function(y) lapply(y, function(x) unique(unlist(unname(x[!is.na(x)])))))
data = do.call(list, lapply(plant.files, function(x) read.csv(textConnection(gsub(":", ",", readLines(x))), sep = ",", header = FALSE)))
# data =   your_data_frame
# data = unname(split(data, seq(nrow(data))))
# data = lapply(data, function(x)
# unique(unlist(unname(x[!is.na(x)]))))
data = lapply(data, function(x) unname(split(x, seq(nrow(x)))))
data = lapply(data, function(y) lapply(y, function(x) unique(unlist(unname(x[!is.na(x)])))))
data
data = unlist(data, recursive = FALSE)
data
segm.data[[file]][which(segm.data[[file]][,1] %in% track.data[[file]][[cell.lineage]]), "Mean.cell.intensity"]
file.names = sapply(list.files("../data/PNAS/plant13/tracking_data/", full.names = FALSE), function(x)
gsub(".txt", "", x, fixed = TRUE))
track.data = lapply(plant.files, get.tracks)
names(track.data) = file.names
source('~/compbio/thesis/code/extract_lineages.R')
source('~/compbio/thesis/code/extract_lineages.R')
source('~/compbio/thesis/code/extract_lineages.R')
source('~/compbio/thesis/code/extract_lineages.R')
source('~/compbio/thesis/code/extract_lineages.R')
get.tracks = function(plant.files) {
# Load data
# data = read.csv(textConnection(gsub(":", ",", readLines(file))), sep = ",", header =
# FALSE)
# data = lapply(plant.files, function(x) read.csv(textConnection(gsub(":", ",", readLines(x))), sep = ",", header =
# FALSE))
# Take out duplicates, remove NAs
data = do.call(list, lapply(plant.files, function(x) read.csv(textConnection(gsub(":", ",", readLines(x))), sep = ",", header = FALSE)))
# data =   your_data_frame
# data = unname(split(data, seq(nrow(data))))
# data = lapply(data, function(x)
# unique(unlist(unname(x[!is.na(x)]))))
data = lapply(data, function(x) unname(split(x, seq(nrow(x)))))
data = lapply(data, function(y) lapply(y, function(x) unique(unlist(unname(x[!is.na(x)])))))
data = unlist(data, recursive = FALSE)
for (ii in 1:length(data)) {
for (jj in ii:length(data)) {
removal = c()
if (ii == jj)
next
if (any(data[[ii]] %in% data[[jj]])) {
data[[jj]] = union(data[[ii]], data[[jj]]) # propagate down
removal = append(removal, ii)
}
}
}
data = data[-removal]
return(data)
}
file.names = sapply(list.files("../data/PNAS/plant13/tracking_data/", full.names = FALSE), function(x)
gsub(".txt", "", x, fixed = TRUE))
track.data = get.tracks(plant.files)#lapply(plant.files, get.tracks)
data = do.call(list, lapply(plant.files, function(x) read.csv(textConnection(gsub(":", ",", readLines(x))), sep = ",", header = FALSE)))
plant.files
data
data = lapply(data, function(x) unname(split(x, seq(nrow(x)))))
data
data = lapply(data, function(y) lapply(y, function(x) unique(unlist(unname(x[!is.na(x)])))))
data
data = unlist(data, recursive = FALSE)
data
for (ii in 1:length(data)) {
for (jj in ii:length(data)) {
removal = c()
if (ii == jj)
next
if (any(data[[ii]] %in% data[[jj]])) {
data[[jj]] = union(data[[ii]], data[[jj]]) # propagate down
removal = append(removal, ii)
}
}
}
removal = c()
for (ii in 1:length(data)) {
for (jj in ii:length(data)) {
if (ii == jj)
next
if (any(data[[ii]] %in% data[[jj]])) {
data[[jj]] = union(data[[ii]], data[[jj]]) # propagate down
removal = append(removal, ii)
}
}
}
source('~/compbio/thesis/code/extract_lineages.R')
removal = c()
for (ii in 1:length(data)) {
for (jj in ii:length(data)) {
if (ii == jj)
next
print(c(ii,jj))
if (any(data[[ii]] %in% data[[jj]])) {
data[[jj]] = union(data[[ii]], data[[jj]]) # propagate down
removal = append(removal, ii)
break
}
}
}
data = data[-removal]
data
data
data = do.call(list, lapply(plant.files, function(x) read.csv(textConnection(gsub(":", ",", readLines(x))), sep = ",", header = FALSE)))
data
data = lapply(data, function(x) unname(split(x, seq(nrow(x)))))
data = lapply(data, function(y) lapply(y, function(x) unique(unlist(unname(x[!is.na(x)])))))
data = unlist(data, recursive = FALSE)
data
removal = c()
for (ii in 1:length(data)) {
for (jj in ii:length(data)) {
if (ii == jj)
next
print(c(ii,jj))
if (any(data[[ii]] %in% data[[jj]])) {
data[[jj]] = union(data[[ii]], data[[jj]]) # propagate down
removal = append(removal, ii)
break
}
}
}
data
data = data[-removal]
data
length(data)
removal
data = do.call(list, lapply(plant.files, function(x) read.csv(textConnection(gsub(":", ",", readLines(x))), sep = ",", header = FALSE)))
# data =   your_data_frame
# data = unname(split(data, seq(nrow(data))))
# data = lapply(data, function(x)
# unique(unlist(unname(x[!is.na(x)]))))
data = lapply(data, function(x) unname(split(x, seq(nrow(x)))))
data = lapply(data, function(y) lapply(y, function(x) unique(unlist(unname(x[!is.na(x)])))))
data = unlist(data, recursive = FALSE)
data
head(data)
ii = 1
jj = 2
any(data[[ii]] %in% data[[jj]])
removal = c()
for (ii in 1:length(data)) {
for (jj in ii:length(data)) {
if (ii == jj){
next
} else if (any(data[[ii]] %in% data[[jj]])) {
data[[jj]] = union(data[[ii]], data[[jj]]) # propagate down
removal = append(removal, ii)
break
}
}
}
removal
length(removal)
length(data)
source('~/compbio/thesis/code/extract_lineages.R')
source('~/compbio/thesis/code/extract_lineages.R')
source('~/compbio/thesis/code/extract_lineages.R')
source('~/compbio/thesis/code/extract_lineages.R')
data
source('~/compbio/thesis/code/extract_lineages.R')
data
removal
length(data)
data
unlist(data)
anyDuplicated(unlist(data))
data
data[ii]
data[[ii]
]
removal = c()
for (ii in 1:length(data)) {
for (jj in ii:length(data)) {
if (ii == jj)
next
if (any(data[[ii]] %in% data[[jj]])) {
data[[jj]] = union(data[[ii]], data[[jj]]) # propagate down
removal = append(removal, ii)
break
}
}
}
data
removal
file = plant.files[1]
file
data = read.csv(textConnection(gsub(":", ",", readLines(file))), sep = ",", header =
FALSE)
data = unname(split(data, seq(nrow(data))))
data = lapply(data, function(x)
unique(unlist(unname(x[!is.na(x)]))))
data
removal = c()
for (ii in 1:length(data)) {
for (jj in ii:length(data)) {
if (ii == jj)
next
if (any(data[[ii]] %in% data[[jj]])) {
data[[jj]] = union(data[[ii]], data[[jj]]) # propagate down
removal = append(removal, ii)
break
}
}
}
data = data[-removal]
data
data = read.csv(textConnection(gsub(":", ",", readLines(file))), sep = ",", header = FALSE)
data
data[,1]
anyDuplicated(data[,1])
sort(data[,1])
duplicate(sort(data[,1]))
duplicated(sort(data[,1]))
(sort(data[,1]))
data[,1]
data[which(data[,1] == 791), ]
data[which(data[,2] == NA), ]
data[which(is.na(data[,2])), ]
data[order(data[which(is.na(data[,2]))), ]
data[data[which(is.na(data[,2])), ]
]
data[order(data[which(is.na(data[,2])), ]), ]
data[order(data[which(is.na(data[,2])), 1]), ]
data[which(is.na(data[,2])),]
data = read.csv(textConnection(gsub(":", ",", readLines(file))), sep = ",", header = FALSE)
data
data[which(is.na(data[,2])),]
data[-which(is.na(data[,2])),]
duplicated(data[-which(is.na(data[,2])),])
any(data[-which(is.na(data[,2])),])
anyDuplicated(data[-which(is.na(data[,2])),])
(data[-which(is.na(data[,2])),])
file = plant.files[3]
data = read.csv(textConnection(gsub(":", ",", readLines(file))), sep = ",", header = FALSE)
data
file = plant.files[4]
data = read.csv(textConnection(gsub(":", ",", readLines(file))), sep = ",", header = FALSE)
data
data = read.csv(textConnection(gsub(":", ",", readLines(file))), sep = ",", header = FALSE)
data
data = unname(split(data, seq(nrow(data))))
data = lapply(data, function(x)
unique(unlist(unname(x[!is.na(x)]))))
data
?isDuplicated
??isDuplicated
data
data = read.csv(textConnection(gsub(":", ",", readLines(file))), sep = ",", header = FALSE)
data = unname(split(data, seq(nrow(data))))
data
data = lapply(data, function(x)
unique(unlist(unname(x[!is.na(x)]))))
data
library(data.table)
data = read.csv(textConnection(gsub(":", ",", readLines(file))), sep = ",", header = FALSE)
data
cell.lines = list()
data = read.csv(textConnection(gsub(":", ",", readLines(file))), sep = ",", header = FALSE)
data = unname(split(data, seq(nrow(data))))
data = lapply(data, function(x)
unique(unlist(unname(x[!is.na(x)]))))
data
data
data = read.csv(textConnection(gsub(":", ",", readLines(file))), sep = ",", header = FALSE)
data
output = data.frame(list(), ncol = 22, nrow=1)
data.frame
data.frame
?data.frame
output = data.frame(list(), col.names = 1:22)
file = plant.files[4]
data = read.csv(textConnection(gsub(":", ",", readLines(file))), sep = ",", header = FALSE)
data
get.tracks(data)
source('~/compbio/thesis/code/extract_lineages.R')
source('~/compbio/thesis/code/extract_lineages.R')
plant.files = list.files("../data/PNAS/plant13/tracking_data/", full.names = TRUE)
plant.files
library(data.table)
plant.files = list.files("../data/PNAS/plant13/tracking_data/", full.names = TRUE)
get.tracks = function(data) {
# Load data
data = read.csv(textConnection(gsub(":", ",", readLines(file))), sep=",", header=FALSE)
# Take out duplicates, remove NAs
data = unname(split(data, seq(nrow(data))))
data = lapply(data, function(x) unique(unlist(unname(x[!is.na(x)]))))
removal = c()
for (ii in 1:length(data)) {
for (jj in ii:length(data)) {
if (ii == jj)
next
if (any(data[[ii]] %in% data[[jj]])) {
data[[jj]] = union(data[[ii]], data[[jj]]) # propagate down
removal = append(removal, ii)
break
}
}
}
data = data[-removal]
return(data)
}
data = read.csv(textConnection(gsub(":", ",", readLines(file))), sep=",", header=FALSE)
data
output = lapply(1:22, list)
output
output = lapply(1:22, function(x) list())
output
data = read.csv(textConnection(gsub(":", ",", readLines(file))), sep=",", header=FALSE)
data = unname(split(data, seq(nrow(data))))
data = lapply(data, function(x) unique(unlist(unname(x[!is.na(x)]))))
cell.lines = lapply(data, list
# }
# get.tracks = function(data) {
#   # Load data
#   data = read.csv(textConnection(gsub(":", ",", readLines(file))), sep=",", header=FALSE)
#   # Take out duplicates, remove NAs
#   data = unname(split(data, seq(nrow(data))))
#   data = lapply(data, function(x) unique(unlist(unname(x[!is.na(x)]))))
#   removal = c()
#   for (ii in 1:length(data)) {
#     for (jj in ii:length(data)) {
#       if (ii == jj)
#         next
#       if (any(data[[ii]] %in% data[[jj]])) {
#         data[[jj]] = union(data[[ii]], data[[jj]]) # propagate down
#         removal = append(removal, ii)
#         break
#       }
#     }
#   }
#   data = data[-removal]
#   return(data)
# }
for(file in 2:length(plant.files)){
}
data = read.csv(textConnection(gsub(":", ",", readLines(file))), sep=",", header=FALSE)
data = unname(split(data, seq(nrow(data))))
data = lapply(data, function(x) unique(unlist(unname(x[!is.na(x)]))))
cell.lines = lapply(data, list)
cell.limnes
cell.lines
data = lapply(data, function(x) unique(unlist(unname(x[!is.na(x)]))))
data = read.csv(textConnection(gsub(":", ",", readLines(file))), sep=",", header=FALSE)
data = unname(split(data, seq(nrow(data))))
data = lapply(data, function(x) unique(unlist(unname(x[!is.na(x)]))))
data
